{"version":3,"sources":["utils/util.js","components/StateTable/StateTable.jsx","components/StatusNumberCard/StatusNumberCard.jsx","components/ChloropethIndia/ChloropethIndia.jsx","components/LineChart/LineChart.jsx","components/DonutChart/DonutChart.jsx","components/Charts/Charts.jsx","App.js","serviceWorker.js","index.js"],"names":["util","statewise","statecode","stateInfo","find","state","console","log","e","last7DaysData","status","filter","data","toLowerCase","StateTable","stateCode","onMouseEnter","setState","props","getHoveredStateData","active","confirmed","recovered","deaths","lastupdatedtime","activeCount","confirmedCount","recoveredCount","deceasedCount","selectedState","setStatewiseCounts","onMouseLeave","total","TableContainer","component","Paper","className","Table","stickyHeader","aria-label","TableHead","TableRow","TableCell","align","TableBody","this","map","bind","key","id","scope","Component","StatusNumberCard","count","color","Card","CardContent","Typography","gutterBottom","toUpperCase","ChloropethIndia","loading","getConfig","shapes","type","options","name","panning","zooming","scrolling","style","tooltip","text","backgroundColor","fontColor","fontSize","borderColor","borderWidth","controls","visible","hoverState","alpha","label","prevProps","instance","zingchart","shape_mouseover","event","setTimeout","shapeid","shape_mouseout","LineChart","confirmedData","getLast7DaysData","deceasedData","recoveredData","config","scaleX","guide","scaleY","series","values","parseInt","marker","height","DonutChart","legend","size","x","y","plot","placement","rules","rule","slice","Charts","src","alt","length","App","getStateWiseDataFromAPI","fetch","then","response","json","statewiseData","getLastSevenDaysDataFromAPI","dataArray","states_daily","i","push","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8343e498.chunk.js","sourcesContent":["const util = {};\n\nutil.getHoveredStateData = (statewise, statecode) => {\n  let stateInfo = null;\n  try {\n    stateInfo =\n      statewise && statewise.find((state) => state.statecode === statecode);\n    console.log(\"stateInfo \", stateInfo);\n  } catch (e) {\n    console.log(\"stateInfo err\", e);\n  }\n  return stateInfo;\n};\n\nutil.getLast7DaysData = (last7DaysData, status) => {\n  const filteredData = last7DaysData.filter(\n    (data) => data.status.toLowerCase() === status.toLowerCase()\n  );\n  return filteredData;\n};\n\nexport default util;\n","import React, { Component } from \"react\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport \"./StateTable.css\";\nimport util from \"../../utils/util\";\nclass StateTable extends Component {\n  state = { stateCode: null };\n  onMouseEnter = (statecode) => {\n    this.setState({ stateCode: statecode });\n    const statewise = this.props.statewise;\n    const stateInfo = util.getHoveredStateData(statewise, statecode);\n    console.log(\"state info inside table >>\", stateInfo);\n    if (stateInfo) {\n      const {\n        active,\n        confirmed,\n        recovered,\n        deaths,\n        state,\n        lastupdatedtime,\n      } = stateInfo;\n      const activeCount = active;\n      const confirmedCount = confirmed;\n      const recoveredCount = recovered;\n      const deceasedCount = deaths;\n      const selectedState = statecode;\n\n      this.props.setStatewiseCounts(\n        confirmedCount,\n        activeCount,\n        recoveredCount,\n        deceasedCount,\n        selectedState,\n        lastupdatedtime,\n        state\n      );\n    }\n  };\n\n  onMouseLeave = () => {\n    this.setState({ stateCode: null });\n    const {\n      active,\n      confirmed,\n      recovered,\n      deaths,\n      lastupdatedtime,\n    } = this.props.total;\n    const activeCount = active;\n    const confirmedCount = confirmed;\n    const recoveredCount = recovered;\n    const deceasedCount = deaths;\n    const selectedState = null;\n    this.props.setStatewiseCounts(\n      activeCount,\n      confirmedCount,\n      recoveredCount,\n      deceasedCount,\n      selectedState,\n      lastupdatedtime,\n      null\n    );\n  };\n  render() {\n    // console.log(\"data in state ===>>\", this.props.statewise);\n\n    return (\n      \n      <TableContainer\n        component={Paper}\n        className=\"container card-border-radius  \"\n      >\n        <Table className=\"table\" stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow className=\"table-row\">\n              <TableCell className=\"table-heading\">STATE/UT</TableCell>\n              <TableCell className=\"table-heading\" align=\"right\">\n                CONFIRMED\n              </TableCell>\n              <TableCell className=\"table-heading\" align=\"right\">\n                ACTIVE\n              </TableCell>\n              <TableCell className=\"table-heading\" align=\"right\">\n                RECOVERED\n              </TableCell>\n              <TableCell className=\"table-heading\" align=\"right\">\n                DECEASED\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {this.props.statewise.map((state) => (\n              <TableRow\n                className={`${\n                  this.state.stateCode === state.statecode ? \"state-hover\" : \"\"\n                }`}\n                onMouseEnter={this.onMouseEnter.bind(this, state.statecode)}\n                key={state.statecode}\n                id={state.statecode}\n                onMouseLeave={this.onMouseLeave}\n              >\n                <TableCell component=\"th\" scope=\"row\">\n                  {state.state}\n                </TableCell>\n                <TableCell align=\"right\">{state.confirmed}</TableCell>\n                <TableCell align=\"right\">{state.active}</TableCell>\n                <TableCell align=\"right\">{state.recovered}</TableCell>\n                <TableCell align=\"right\">{state.deaths}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  }\n}\n\nexport default StateTable;\n","import React from \"react\";\n\nimport Card from \"@material-ui/core/Card\";\n\nimport CardContent from \"@material-ui/core/CardContent\";\n\nimport Typography from \"@material-ui/core/Typography\";\nimport \"./StatusNumberCard.css\";\n\nexport default function StatusNumberCard({ count, status, color }) {\n  return (\n    <Card className={`root ${color} `}>\n      <CardContent>\n        <Typography\n          className={`title text-${color}`}\n          color=\"textPrimary\"\n          gutterBottom\n        >\n          {status.toUpperCase()}\n        </Typography>\n        <Typography\n          className={`sub-title text-${color}`}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          {count}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n","import React, { Component } from \"react\";\nimport \"./ChloropethIndia.css\";\nimport ZingChart from \"zingchart-react\";\nimport zingchart from \"zingchart/es6\";\nimport \"zingchart/modules-es6/zingchart-maps.min.js\";\nimport \"zingchart/modules-es6/zingchart-maps-ind.min.js\";\nimport { Card } from \"@material-ui/core\";\nimport StatusNumberCard from \"../StatusNumberCard/StatusNumberCard.jsx\";\nimport util from \"../../../src/utils/util.js\";\nexport default class ChloropethIndia extends Component {\n  state = { loading: false };\n  getConfig = () => {\n    const config = {\n      shapes: [\n        {\n          type: \"zingchart.maps\",\n          options: {\n            name: \"ind\",\n            panning: false, // turn of zooming. Doesn't work with bounding box\n            zooming: false,\n            scrolling: false,\n            style: {\n              tooltip: {\n                text: this.props.state\n                  ? `${this.props.state}: ${this.props.confirmedCount}`\n                  : \"Loading...\",\n                backgroundColor: \"#5d666f\",\n                fontColor: \"#FFF\",\n                fontSize: \"18px\",\n              },\n              borderColor: \"#000\",\n              borderWidth: \"2px\",\n              controls: {\n                visible: false, // turn of zooming. Doesn't work with bounding box\n              },\n              hoverState: {\n                alpha: 0.28,\n                backgroundColor: \"#EF9A9A\",\n              },\n              label: {\n                // text displaying. Like valueBox\n                fontSize: \"15px\",\n                visible: false,\n              },\n            },\n          },\n        },\n      ],\n    };\n    return config;\n  };\n\n  //performance improvement\n  componentDidUpdate(prevProps) {\n    if (prevProps.state !== this.props.state) {\n      this.setState({ loading: false });\n    }\n  }\n\n  componentDidMount() {\n    const statewise = this.props.statewise;\n    const instance = this;\n    zingchart.shape_mouseover = function (event) {\n      instance.setState({ loading: true });\n      setTimeout(function () {\n        let statecode = event.shapeid;\n        statecode = statecode === \"TL\" ? \"TG\" : statecode;\n        const stateInfo = util.getHoveredStateData(statewise, statecode);\n        if (stateInfo) {\n          const {\n            active,\n            confirmed,\n            recovered,\n            deaths,\n            lastupdatedtime,\n            state,\n          } = stateInfo;\n          const activeCount = active;\n          const confirmedCount = confirmed;\n          const recoveredCount = recovered;\n          const deceasedCount = deaths;\n          const selectedState = statecode;\n\n          instance.props.setStatewiseCounts(\n            confirmedCount,\n            activeCount,\n            recoveredCount,\n            deceasedCount,\n            selectedState,\n            lastupdatedtime,\n            state\n          );\n        }\n      }, 300);\n    };\n    zingchart.shape_mouseout = function (event) {\n      const {\n        active,\n        confirmed,\n        recovered,\n        deaths,\n        lastupdatedtime,\n      } = instance.props.total;\n      const activeCount = active;\n      const confirmedCount = confirmed;\n      const recoveredCount = recovered;\n      const deceasedCount = deaths;\n      const selectedState = null;\n      instance.props.setStatewiseCounts(\n        activeCount,\n        confirmedCount,\n        recoveredCount,\n        deceasedCount,\n        selectedState,\n        lastupdatedtime,\n        null\n      );\n    };\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"header2\">\n            <div className=\"main-title\">INDIA MAP</div>\n            <div className=\"sub-title\">HOVER OVER A STATE FOR MORE DETAILS</div>\n        </div>\n        <Card className=\"chloropeth-india card-border-radius\">\n          <div className=\"status-number-cards\">\n            <StatusNumberCard\n              count={this.props.confirmedCount}\n              status=\"confirmed\"\n              color=\"red\"\n            />\n            <StatusNumberCard\n              count={this.props.activeCount}\n              status=\"active\"\n              color=\"blue\"\n            />\n            <StatusNumberCard\n              count={this.props.recoveredCount}\n              status=\"recoverd\"\n              color=\"green\"\n            />\n            <StatusNumberCard\n              count={this.props.deceasedCount}\n              status=\"deceased\"\n              color=\"gray\"\n            />\n          </div>\n          <div className=\"map\">\n            <div className=\"state-name-last-date\">\n              <div className=\"state-name\">{this.props.state}</div>\n              <div>\n                <div className=\"last-date-title\">LAST UPDATED</div>\n                <div className=\"last-date\">{this.props.lastupdatedtime}</div>\n              </div>\n            </div>\n            <ZingChart data={this.getConfig()} />\n          </div>\n        </Card>\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport ZingChart from \"zingchart-react\";\nimport \"zingchart/es6\";\nimport util from \"../../utils/util\";\n\nconst LineChart = ({ last7DaysData, selectedState }) => {\n  const confirmedData = util.getLast7DaysData(last7DaysData, \"confirmed\");\n  const deceasedData = util.getLast7DaysData(last7DaysData, \"deceased\");\n  const recoveredData = util.getLast7DaysData(last7DaysData, \"recovered\");\n\n  // console.log(\"selectedState\", selectedState);\n  selectedState = selectedState && selectedState.toLowerCase();\n  const confirmedDataValues = selectedState\n    ? confirmedData.map((data) => parseInt(data[selectedState]))\n    : confirmedData.map((data) => parseInt(data[\"tt\"]));\n\n  const deceasedDataValues = selectedState\n    ? deceasedData.map((data) => parseInt(data[selectedState]))\n    : deceasedData.map((data) => parseInt(data[\"tt\"]));\n\n  const recoveredDataValues = selectedState\n    ? recoveredData.map((data) => parseInt(data[selectedState]))\n    : recoveredData.map((data) => parseInt(data[\"tt\"]));\n\n  // console.log(\"confirmedData ===>>\", confirmedDataValues);\n  // console.log(\"deceasedDataValues ===>>\", deceasedDataValues);\n  // console.log(\"recoveredDataValues ===>>\", recoveredDataValues);\n  const config = {\n    type: \"line\",\n\n    scaleX: {\n      guide: {\n        visible: false,\n      },\n    },\n    scaleY: {\n      guide: {\n        visible: false,\n      },\n    },\n    series: [\n      {\n        values: confirmedDataValues,\n        \"line-color\": \"#ff0000\",\n        \"line-width\": 3,\n        marker: {\n          \"background-color\": \"#ff0000\",\n          \"border-color\": \"#ff0000\",\n        },\n      },\n      {\n        values: deceasedDataValues,\n        \"line-color\": \"#5d666f\",\n        \"line-width\": 3,\n        marker: {\n          \"background-color\": \"#5d666f\",\n          \"border-color\": \"#5d666f\",\n        },\n      },\n      {\n        values: recoveredDataValues,\n        \"line-color\": \"#009b3e\",\n        \"line-width\": 3,\n        marker: {\n          \"background-color\": \"#009b3e\",\n          \"border-color\": \"#009b3e\",\n        },\n      },\n    ],\n  };\n\n  return <ZingChart height=\"200\" data={config} />;\n};\n\nexport default LineChart;\n","import React from \"react\";\nimport \"./DonutChart.css\";\nimport ZingChart from \"zingchart-react\";\nimport \"zingchart/es6\";\n\nconst DonutChart = ({\n  confirmedCount,\n  activeCount,\n  deceasedCount,\n  recoveredCount,\n}) => {\n  const config = {\n    type: \"ring\",\n    legend: {\n      marker: {\n        type: \"circle\",\n        size: 5,\n      },\n      \"border-width\": 0,\n      \"toggle-action\": \"remove\",\n      x: \"70%\",\n      y: \"38%\",\n    },\n    plot: {\n      \"value-box\": {\n        text: `${parseInt(confirmedCount)} <br>  Confirmed`,\n        placement: \"center\",\n        \"font-color\": \"black\",\n        \"font-size\": 20,\n        \"font-family\": \"Roboto\",\n        \"font-weight\": \"bold\",\n        rules: [\n          {\n            rule: \"%p != 0\",\n            visible: false,\n          },\n        ],\n      },\n      slice: \"85%\",\n      \"border-width\": 2,\n      \"border-color\": \"#fff\",\n    },\n    series: [\n      {\n        values: [parseInt(activeCount)],\n        \"background-color\": \"#006df2\",\n        text: `Active: ${activeCount}`,\n      },\n      {\n        values: [parseInt(deceasedCount)],\n        \"background-color\": \"#5d666f\",\n        text: `Deceased: ${deceasedCount}`,\n      },\n      {\n        values: [parseInt(recoveredCount)],\n        \"background-color\": \"#009b3e\",\n        text: `Recovered: ${recoveredCount}`,\n      },\n    ],\n  };\n  return <ZingChart height=\"200\" data={config} />;\n};\n\nexport default DonutChart;\n","import React from \"react\";\nimport LineChart from \"../LineChart/LineChart\";\nimport DonutChart from \"../DonutChart/DonutChart\";\nimport { Card } from \"@material-ui/core\";\nimport \"./Charts.css\";\n\n\nconst Charts = ({\n  statewise,\n  last7DaysData,\n  selectedState,\n  confirmedCount,\n  activeCount,\n  recoveredCount,\n  deceasedCount,\n}) => {\n  return (\n    <>\n      <div className=\"header1\">\n        <div>\n          <img src=\"logo.png\" alt=\"logo\"/> \n        </div>\n        <div>\n          <div className=\"main-title\">INDIA COVID-19 Tracker</div>\n          <div className=\"sub-title\">Let's all pray to make our Earth Covid-19 free soon, Stay Safe and do TheLocate</div>\n        </div>\n      </div>\n      <Card className=\"chart card-border-radius\">\n        <div className=\"donut-chart\">\n          {statewise.length && (\n            <DonutChart\n              confirmedCount={confirmedCount}\n              activeCount={activeCount}\n              recoveredCount={recoveredCount}\n              deceasedCount={deceasedCount}\n            />\n          )}\n        </div>\n        <div className=\"line-chart\">\n          {last7DaysData && last7DaysData.length && (\n            <LineChart\n              selectedState={selectedState}\n              last7DaysData={last7DaysData}\n            />\n          )}\n        </div>\n      </Card>\n    </>\n  );\n};\n\nexport default Charts;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport StateTable from \"./components/StateTable/StateTable.jsx\";\nimport ChloropethIndia from \"./components/ChloropethIndia/ChloropethIndia\";\nimport Charts from \"./components/Charts/Charts\";\nexport default class App extends Component {\n  state = {\n    statewise: [],\n    confirmedCount: null,\n    activeCount: null,\n    recoveredCount: null,\n    deceasedCount: null,\n    selectedState: null,\n    total: null,\n    last7DaysData: null,\n    lastupdatedtime: null,\n    state: null,\n  };\n\n  getStateWiseDataFromAPI = () => {\n    fetch(`https://api.covid19india.org/data.json`)\n      .then((response) => response.json())\n      .then((data) => {\n        const statewiseData = data.statewise;\n        const statewise = statewiseData.slice(1);\n        const total = statewiseData[0];\n        const { active, confirmed, recovered, deaths, lastupdatedtime } = total;\n        this.setState(\n          {\n            total: total,\n            statewise: statewise,\n            confirmedCount: confirmed,\n            activeCount: active,\n            recoveredCount: recovered,\n            deceasedCount: deaths,\n            lastupdatedtime,\n          },\n          () => console.log(\"state ===>\", this.state)\n        );\n      });\n  };\n\n  getLastSevenDaysDataFromAPI = () => {\n    fetch(`https://api.covid19india.org/states_daily.json`)\n      .then((response) => response.json())\n      .then((data) => {\n        // console.log(\"last seven days data ===>>\", data);\n        const dataArray = data.states_daily;\n\n        const length = dataArray.length - 1;\n        const last7DaysData = [];\n        for (let i = length; i > length - 7 * 3; i--) {\n          last7DaysData.push(dataArray[i]);\n        }\n        this.setState({\n          last7DaysData,\n        });\n        // console.log(\"last7DaysData ===>>\", last7DaysData);\n      });\n  };\n\n  componentDidMount() {\n    this.getStateWiseDataFromAPI();\n    this.getLastSevenDaysDataFromAPI();\n  }\n\n  setStatewiseCounts = (\n    confirmedCount,\n    activeCount,\n    recoveredCount,\n    deceasedCount,\n    selectedState,\n    lastupdatedtime,\n    state\n  ) => {\n    this.setState({\n      confirmedCount,\n      activeCount,\n      recoveredCount,\n      deceasedCount,\n      selectedState,\n      lastupdatedtime,\n      state,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"main\">\n        <div className=\"state-table \">\n          <Charts {...this.state} />\n          <StateTable\n            setStatewiseCounts={this.setStatewiseCounts}\n            {...this.state}\n          />\n        </div>\n        <div className=\"map\">\n          {this.state.statewise.length && (\n          <ChloropethIndia\n            setStatewiseCounts={this.setStatewiseCounts}\n            {...this.state}\n          />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}